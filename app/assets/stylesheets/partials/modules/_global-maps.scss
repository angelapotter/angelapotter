// UTILITIES

@function insert-nth($list, $index, $value) {
  $result: null;

  @if type-of($index) != number {
    @warn "$index: #{quote($index)} is not a number for `insert-nth`.";
  }

  @else if $index < 1 {
    @warn "List index 0 must be a non-zero integer for `insert-nth`";
  }

  @else if $index > length($list) {
    @warn "List index is #{$index} but list is only #{length($list)} item long for `insert-nth'.";
  }

  @else {
    $result: ();

    @for $i from 1 through length($list) {
      @if $i == $index {
        $result: append($result, $value);
      }

      $result: append($result, nth($list, $i));
    }
  }

  @return $result;
}

@function replace($list, $old-value, $new-value, $recursive: false) {
  $result: ();

  @for $i from 1 through length($list) {
    @if type-of(nth($list, $i)) == list and $recursive {
      $result: append($result, replace(nth($list, $i), $old-value, $new-value, $recursive));
    }

    @else {
      @if nth($list, $i) == $old-value {
        $result: append($result, $new-value);
      }

      @else {
        $result: append($result, nth($list, $i));
      }
    }
  }

  @return $result;
}

@function map-deep-set($map, $keys.../*, $value */) {
  $map-list: ($map,);
  $result: null;

  @if length($keys) == 2 {
    @return map-merge($map, (nth($keys, 1): nth($keys, -1)));
  }

  @for $i from 1 through length($keys) - 2 {
    $map-list: append($map-list, map-get(nth($map-list, -1), nth($keys, $i)));
  }

  @for $i from length($map-list) through 1 {
    $result: map-merge(nth($map-list, $i), (nth($keys, $i): if($i == length($map-list), nth($keys, -1), $result)));
  }

  @return $result;
}


// COLORS

$gray-shades: (
  darkest: #333,
  dark: #666,
  medium-dark: #8a8a8a,
  medium: #999,
  light: #aaa,
  lighter: #ccc,
  off-white: #F5F4F1
);

$brand-colors: (
  primary: darken( #00b8a5, 2% )
);

@function gray( $shade: dark ) {
  @return map-get( $gray-shades, $shade );
};

@function brand( $color: primary ) {
  @return map-get( $brand-colors, $color );
};

// ALIGNMENT

$padding-sizes: (
  md: 20px,
  lg: 50px,
  xl: 70px
);

@function padding( $size: md ) {
  @return map-get( $padding-sizes, $size );
}


// PAGE ELEMENTS

$page-props: (
  width: 1300px,
  small-width: 1000px,
  padding-x: padding( md ),
  padding-y: padding( lg ),
  padding-y-mobile: 35px,
  padding-y-portfolio: 35px
);

@function page( $prop ) {
  @return map-get( $page-props, $prop );
}

$header-props: (
  nav-primary-height: 75px,
  nav-secondary-height: 47px,
  padding-bottom: padding(md)
);

$nav-link-props: (
  underline-height: 6px,
  padding-x: 0,
  padding-y: 18px,
  color: gray( darkest )
);

$portfolio-item-props: (
  img-width: 780px,
  img-aspect: 605 / 900,
  gutter: 80px,
  img-text-stack-bp: 850px
);

@function portfolio-item( $prop ) {
  @return map-get( $portfolio-item-props, $prop );
}

$about-props: (
  headshot-size: 436px,
  gutter: 50px,
  bp-xl: 1200px,
  bp-md: 650px
);

@function about( $prop ) {
  @return map-get( $about-props, $prop );
}



// EFFECTS

$transition-lengths: (
  sm: 0.1s,
  md: 0.3s,
  lg: 0.5s
);

@function transition( $length: md ) {
  @return map-get( $transition-lengths, $length );
}


// SPRITES

$social-sprite-size: 20px;

$social-icons: (
  (
    name: dribbble,
    color: #ee4589
  ),
  (
    name: github,
    color: #333
  ),
  (
    name: stack-exchange,
    color: #1e60a1
  ),
  (
    name: twitter,
    color: #51abf1
  ),
  (
    name: linkedin,
    color: #0883bd
  ),
  (
    name: email,
    color: #333
  ),
  (
    name: phone,
    color: #333
  )
);

@for $i from 1 through length( $social-icons ) {
  $icon-props: nth( $social-icons, $i );
  $pos-x: -$social-sprite-size * ( $i - 1 );
  $new-icon-props: map-merge( $icon-props, ( pos-x: $pos-x ) );
  $social-icons: replace( $social-icons, $icon-props, $new-icon-props);
}
